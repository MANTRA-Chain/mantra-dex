{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "epoch_config",
    "owner"
  ],
  "properties": {
    "epoch_config": {
      "description": "The configuration for the epochs.",
      "allOf": [
        {
          "$ref": "#/definitions/EpochConfig"
        }
      ]
    },
    "owner": {
      "description": "The owner of the contract.",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "EpochConfig": {
      "description": "The epoch configuration.",
      "type": "object",
      "required": [
        "duration",
        "genesis_epoch"
      ],
      "properties": {
        "duration": {
          "description": "The duration of an epoch in seconds.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "genesis_epoch": {
          "description": "Timestamp for the first epoch, in seconds.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
