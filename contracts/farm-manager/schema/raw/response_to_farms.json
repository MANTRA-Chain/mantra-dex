{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FarmsResponse",
  "description": "The response for the farms query",
  "type": "object",
  "required": [
    "farms"
  ],
  "properties": {
    "farms": {
      "description": "The list of farms",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Farm"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Curve": {
      "oneOf": [
        {
          "description": "A linear curve that releases assets uniformly over time.",
          "type": "string",
          "enum": [
            "linear"
          ]
        }
      ]
    },
    "Farm": {
      "description": "Represents a farm.",
      "type": "object",
      "required": [
        "claimed_amount",
        "curve",
        "emission_rate",
        "farm_asset",
        "identifier",
        "lp_denom",
        "owner",
        "preliminary_end_epoch",
        "start_epoch"
      ],
      "properties": {
        "claimed_amount": {
          "description": "The amount of the `farm_asset` that has been claimed so far.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "curve": {
          "description": "The type of curve the farm has.",
          "allOf": [
            {
              "$ref": "#/definitions/Curve"
            }
          ]
        },
        "emission_rate": {
          "description": "The amount of the `farm_asset` that is to be distributed every epoch.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "farm_asset": {
          "description": "The asset the farm was created to distribute.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "identifier": {
          "description": "The ID of the farm.",
          "type": "string"
        },
        "lp_denom": {
          "description": "The LP asset denom to create the farm for.",
          "type": "string"
        },
        "owner": {
          "description": "The account which opened the farm and can manage it.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "preliminary_end_epoch": {
          "description": "The epoch at which the farm will preliminary end (in case it's not expanded).",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_epoch": {
          "description": "The epoch at which the farm starts.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
