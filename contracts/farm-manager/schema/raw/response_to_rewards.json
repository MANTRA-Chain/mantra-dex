{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RewardsResponse",
  "oneOf": [
    {
      "description": "The rewards response",
      "type": "object",
      "required": [
        "rewards_response"
      ],
      "properties": {
        "rewards_response": {
          "type": "object",
          "required": [
            "rewards_per_lp_denom",
            "total_rewards"
          ],
          "properties": {
            "rewards_per_lp_denom": {
              "description": "The rewards per LP denom that is available to a user if they executed the `claim` function at this point.",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "total_rewards": {
              "description": "The rewards that is available to a user if they executed the `claim` function at this point.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Rewards response used internally when querying the rewards",
      "type": "object",
      "required": [
        "query_rewards_response"
      ],
      "properties": {
        "query_rewards_response": {
          "type": "object",
          "required": [
            "rewards"
          ],
          "properties": {
            "rewards": {
              "description": "The rewards that is available to a user if they executed the `claim` function at this point.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returned when claiming rewards",
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object",
          "required": [
            "modified_farms",
            "rewards"
          ],
          "properties": {
            "modified_farms": {
              "description": "The rewards that were claimed on each farm, if any.",
              "type": "object",
              "additionalProperties": false
            },
            "rewards": {
              "description": "The rewards that is available to a user if they executed the `claim` function at this point.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
