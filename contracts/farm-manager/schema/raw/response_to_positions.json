{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PositionsResponse",
  "type": "object",
  "required": [
    "positions"
  ],
  "properties": {
    "positions": {
      "description": "All the positions a user has.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Position"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Position": {
      "description": "Represents an LP position.",
      "type": "object",
      "required": [
        "identifier",
        "lp_asset",
        "open",
        "receiver",
        "unlocking_duration"
      ],
      "properties": {
        "expiring_at": {
          "description": "The block height at which the position, after being closed, can be withdrawn.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "identifier": {
          "description": "The identifier of the position.",
          "type": "string"
        },
        "lp_asset": {
          "description": "The amount of LP tokens that are put up to farm rewards.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "open": {
          "description": "If true, the position is open. If false, the position is closed.",
          "type": "boolean"
        },
        "receiver": {
          "description": "The owner of the position.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "unlocking_duration": {
          "description": "Represents the amount of time in seconds the user must wait after unlocking for the LP tokens to be released.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
