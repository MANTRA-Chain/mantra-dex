{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "The instantiation message",
  "type": "object",
  "required": [
    "create_farm_fee",
    "emergency_unlock_penalty",
    "epoch_manager_addr",
    "farm_expiration_time",
    "fee_collector_addr",
    "max_concurrent_farms",
    "max_farm_epoch_buffer",
    "max_unlocking_duration",
    "min_unlocking_duration",
    "owner",
    "pool_manager_addr"
  ],
  "properties": {
    "create_farm_fee": {
      "description": "The fee that must be paid to create a farm.",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    },
    "emergency_unlock_penalty": {
      "description": "The penalty for unlocking a position before the unlocking duration finishes. In percentage.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "epoch_manager_addr": {
      "description": "The epoch manager address, where the epochs are managed",
      "type": "string"
    },
    "farm_expiration_time": {
      "description": "The amount of time after which a farm is considered to be expired after it ended. In seconds. Once a farm is expired it cannot be expanded, and expired farms can be closed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "fee_collector_addr": {
      "description": "The fee collector address, where protocol fees are stored",
      "type": "string"
    },
    "max_concurrent_farms": {
      "description": "The maximum amount of farms that can exist for a single LP token at a time.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "max_farm_epoch_buffer": {
      "description": "New farms are allowed to start up to `current_epoch + start_epoch_buffer` into the future.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "max_unlocking_duration": {
      "description": "The maximum amount of time that a user can lock their tokens for. In seconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "min_unlocking_duration": {
      "description": "The minimum amount of time that a user can lock their tokens for. In seconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "owner": {
      "description": "The owner of the contract",
      "type": "string"
    },
    "pool_manager_addr": {
      "description": "The pool manager address, where pools are created",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
